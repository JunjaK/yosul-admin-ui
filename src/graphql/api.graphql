# systemCode
query systemCode {
    getSystemCodeAll {
        isDeleted
        parentCdId
        cdValue
        cdType
        cdTitle
        cdId
    }
}

# User
query getUser($createdAfter: String, $createdBefore: String, $loginId: Int, $nickname: String, $updatedAfter: String, $updatedBefore: String, $userId: Int) {
    getUser(
    createdAfter: $createdAfter
    createdBefore: $createdBefore
    loginId: $loginId
    nickname: $nickname
    updatedAfter: $updatedAfter
    updatedBefore: $updatedBefore
    userId: $userId
  ) {
    birthday
    createdAt
    email
    level
    loginId
    nickname
    phoneNumber
    profileImageId
    updatedAt
    userId
    userProfileImg
  }
}

query getUserList($pageNum: Int!, $perPage: Int!, $createdAfter: String, $createdBefore: String, $loginId: String, $nickname: String, $sortBy: String, $sortDirection: String, $updatedAfter: String, $updatedBefore: String, $userId: ID) {
    getUserList(
    pageNum: $pageNum
    perPage: $perPage
    createdAfter: $createdAfter
    createdBefore: $createdBefore
    loginId: $loginId
    nickname: $nickname
    sortBy: $sortBy
    sortDirection: $sortDirection
    updatedBefore: $updatedBefore
    userId: $userId
    updatedAfter: $updatedAfter
  ) {
    currentPage
    totalCount
    totalPages
    perPage
    data {
      userStatus
      userId
      updatedAt
      signUpType
      phoneNumber
      nickname
      loginId
      level
    #   isDeleted
      createdAt
      email
      birthday
    }
  }
}

mutation createUser($loginId: String!, $email: String!, $password: String!) {
    userCreate(
        request: {
            loginId: $loginId
            email: $email
            password: $password
        }
    ) {
        userId
        createdAt
        updatedAt
        userStatus
        signUpType
        phoneNumber
        nickname
        loginId
        level
        email
        birthday
    }
}
mutation modifyUser($id: ID!, $nickname: String, $email: String, $phoneNumber: String, $birthday: String, $profileImageId: Int) {
    userModify(
        id: $id
        request: {
            nickname: $nickname
            email: $email
            phoneNumber: $phoneNumber
            birthday: $birthday
            profileImageId: $profileImageId
        }
    ) {
        userId
        createdAt
        updatedAt
        userStatus
        signUpType
        phoneNumber
        nickname
        loginId
        level
        email
        birthday
    }
}
mutation deleteUser($id: ID!) {
    userDelete(
        id: $id
    )
}



# Alcohol
query getAlcoholDetail($alcoholId: ID!) {
    getAlcoholToAlcholId(alcoholId: $alcoholId) {
        name
        type
        updatedAt
        subType
        isDeleted
        deletedAt
        distilillery
        createdAt
        alcoholId
        country
    }
}

query getAlcoholList($pageNum: Int!, $perPage: Int!, $country: String, $createdAfter: String, $createdBefore: String, $name: String, $sortBy: String, $updatedAfter: String, $sortDirection: String, $updatedBefore: String) {
    getAlcoholListForAdmin(
        pageNum: $pageNum
        perPage: $perPage
        country: $country
        createdAfter: $createdAfter
        createdBefore: $createdBefore
        name: $name
        sortBy: $sortBy
        updatedAfter: $updatedAfter
        sortDirection: $sortDirection
        updatedBefore: $updatedBefore
    ) {
        currentPage
        perPage
        totalPages
        totalCount
        data {
            name
            type
            updatedAt
            subType
            isDeleted
            deletedAt
            distilillery
            createdAt
            alcoholId
            country
        }
    }
}

mutation createAlcohol($name: String!, $brand: Int!, $country: String!, $distilillery: String!, $isDeleted: Boolean!, $subType: Int!, $type: Int!) {
    alcoholCreate(
        request: {
            name: $name,
            brand: $brand,
            country: $country,
            distilillery: $distilillery,
            isDeleted: $isDeleted,
            subType: $subType,
            type: $type
        }
    ) {
        alcoholId
        country
        createdAt
        deletedAt
        distilillery
        isDeleted
        name
        type
        subType
        updatedAt
    }
}

mutation deleteAlcohol($alcoholId: Int!, $isDeleted: Boolean!) {
    alcoholDeleted(
        request: {
            alcoholId: $alcoholId,
            isDeleted: $isDeleted
        }
    ) {
        updatedAt
        subType
        type
        name
        isDeleted
        distilillery
        deletedAt
        createdAt
        country
        alcoholId
    }
}

mutation modifyAlcohol($alcoholId: Int!, $brand: Int!, $country: String!, $distilillery: String!, $isDeleted: Boolean!, $name: String!, $subType: Int!, $type: Int!) {
    alcoholModified(
        request: {
            alcoholId: $alcoholId,
            brand: $brand,
            country: $country,
            distilillery: $distilillery,
            isDeleted: $isDeleted,
            name: $name,
            subType: $subType,
            type: $type
        }
    ) {
        updatedAt
        type
        subType
        name
        isDeleted
        distilillery
        deletedAt
        createdAt
        country
        alcoholId
    }
}

# TastingNote
query getTastingNoteList($pageNum: Int!, $perPage: Int!, $alcohol: String, $createdAfter: String, $createdBefore: String, $loginId: String, $nickname: String, $sortBy: String, $sortDirection: String, $title: String, $updatedAfter: String, $updatedBefore: String) {
    getTastingNotesForAdmin(
        pageNum: $pageNum
        perPage: $perPage
        alcohol: $alcohol
        createdAfter: $createdAfter
        createdBefore: $createdBefore
        loginId: $loginId
        nickname: $nickname
        sortBy: $sortBy
        sortDirection: $sortDirection
        title: $title
        updatedAfter: $updatedAfter
        updatedBefore: $updatedBefore
    ) {
        currentPage
        data {
            alcoholName
            alcoholId
            createdAt
            deletedAt
            updatedAt
            drinkDate
            review
            rating
            userId
            userNickName
            title
            isDeleted
            tastingNoteId
            commentCount
            likeCount
        }
        perPage
        totalCount
        totalPages
    }
}

query getTastingNoteDetail($tastingNoteId: ID!, $userId: ID!) {
    getTastingNotesId(tastingNoteId: $tastingNoteId, userId: $userId) {
        acidity
        afterglow
        alcoholId
        alcoholName
        userId
        attachFiles {
            attachFileId
            filePath
            originalFileName
        }
        body
        color
        concentration
        drinkAmount
        drinkAmountType
        drinkDate
        etcScentType
        fruity
        grainy
        isDeleted
        isLiked
        likeCount
        commentCount
        hashTag
        pairingRate
        purchasePrice
        rating
        review
        scentType
        sweety
        tastingNoteId
        sparkling
        temperature
        title
        togetherComment
        togetherFood
        userId
        updatedAt
        createdAt
    }
}

mutation modifyTastingNote ($tastingNote: TnRequestModify!) {
    tnModify(request: $tastingNote) {
        acidity
        afterglow
        alcoholId
        body
        color
        concentration
        drinkAmount
        drinkAmountType
        drinkDate
        etcScentType
        fruity
        grainy
        hashTag
        isDeleted
        pairingRate
        purchasePrice
        rating
        review
        scentType
        sparkling
        sweety
        tastingNoteId
        temperature
        title
        togetherComment
        togetherFood
        userId
        attachFiles { attachFileId filePath originalFileName }
        tastingNoteId
        updatedAt
        createdAt
    }
}

mutation deleteTastingNote($tastingNoteId: ID!) {
    tnDeleted(request: {tastingNoteId: $tastingNoteId}) {
        tastingNoteId
    }
}



# TastingNoteTemp
query getTastingNoteTempList($pageNum: Int!, $perPage: Int!, $alcohol: String, $createdAfter: String, $createdBefore: String, $loginId: String, $nickname: String, $sortBy: String, $sortDirection: String, $title: String, $updatedAfter: String, $updatedBefore: String) {
  getTastingNoteTempListForAdmin(
    pageNum: $pageNum
    perPage: $perPage
    alcohol: $alcohol
    createdAfter: $createdAfter
    loginId: $loginId
    createdBefore: $createdBefore
    nickname: $nickname
    sortBy: $sortBy
    sortDirection: ""
    title: ""
    updatedAfter: ""
    updatedBefore: ""
  ) {
    currentPage
    totalCount
    totalPages
    perPage
    data {
      alcoholName
      alcoholId
      createdAt
      deletedAt
      drinkDate
      isDeleted
      rating
      review
      title
      updatedAt
      userId
      userNickName
    }
  }
}

mutation modifyTastingNoteTemp($tastingNoteTemp: TnTRequestModify!) {
    tnTModify(request: $tastingNoteTemp) {
        tastingNoteTempId
        acidity
        afterglow
        alcoholId
        body
        color
        concentration
        drinkAmount
        drinkAmountType
        drinkDate
        etcScentType
        fruity
        grainy
        hashTag
        isDeleted
        pairingRate
        purchasePrice
        rating
        review
        scentType
        sparkling
        sweety
        temperature
        title
        togetherComment
        togetherFood
        userId
        attachFileGroupId
    }
}

mutation deleteTastingNoteTemp($tastingNoteTempId: ID!) {
    tnTDeleted(request: {tastingNoteTempId: $tastingNoteTempId}) {
        tastingNoteTempId
    }
}

# Comment
query getCommentsList($pageNum: Int!, $perPage: Int!, $loginId: String!, $nickname: String!, $sortBy: String!, $sortDirection: String!, $tastingNoteTitle: String!) {
    getCommentsForAdmin(
        pageNum: $pageNum
        perPage: $perPage
        loginId: $loginId
        nickname: $nickname
        sortBy: $sortBy
        sortDirection: $sortDirection
        tastingNoteTitle: $tastingNoteTitle
    ) {
        currentPage
        perPage
        data {
            content
            createdAt
            deletedAt
            depth
            likeCount
            parentId
            updatedAt
            userId
            userNickName
            commentId
        }
        totalCount
        totalPages
    }
}

query getRepliesByParentId($parentId: ID!, $pageNum: Int!, $perPage: Int!, $userId: ID!) {
    getRepliesByParentId(pageNum: $pageNum, perPage: $perPage, parentId: $parentId, userId: $userId) {
        data {
            userProfileImg
            userNickName
            userId
            updatedAt
            parentId
            depth
            createdAt
            deletedAt
            content
            commentId
            isLiked
            likeCount
        }
        currentPage
        perPage
        totalCount
        totalPages
    }
}

mutation cmtDelete($commentId: ID!, $userId: Int!) {
    deleteComment(request: {commentId: $commentId, userId: $userId}) {
        commentId
        parentId
        tastingNoteId
        userId
        deletedAt
    }
}

mutation cmtModify($cmtRequestAdd: CmtRequestModify!) {
    editComment(request: $cmtRequestAdd) {
        commentId
        parentId
        tastingNoteId
        userId
        updatedAt
    }
}
